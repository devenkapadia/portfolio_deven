{"version":3,"sources":["constants/index.js","pages/contacts/styles/contacts.js","pages/contacts/index.jsx"],"names":["EMAIL_VALIDATE_REGX","useStyles","makeStyles","theme","contactContainer","height","heading","color","textAlign","textTransform","marginBottom","form","top","left","transform","position","input","button","marginTop","borderColor","cursor","field","margin","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","InputField","withStyles","root","TextField","Contact","classes","useState","os","userAgent","ipinfo","clientInfo","setClientInfo","loading","setLoading","name","email","message","formData","setFormData","errors","setErrors","validateForm","isValid","newErrors","trim","test","handleInputChange","e","target","value","handleOnSubmit","a","preventDefault","data","FormData","append","JSON","stringify","axios","method","url","toast","success","error","useEffect","navigator","platform","prev","get","then","catch","console","Box","component","className","Grid","container","justify","Typography","variant","onSubmit","fullWidth","label","inputProps","onChange","helperText","multiline","rows","Button","type","endIcon","Send","disabled","width","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary"],"mappings":"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","file":"static/js/9.63db3090.chunk.js","sourcesContent":["export const EMAIL_VALIDATE_REGX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n","import { makeStyles, TextField, withStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  contactContainer: {\r\n    height: '100vh',\r\n  },\r\n  heading: {\r\n    color: 'tomato',\r\n    textAlign: 'center',\r\n    textTransform: 'uppercase',\r\n    marginBottom: '1rem',\r\n  },\r\n  form: {\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    position: 'absolute',\r\n  },\r\n  input: {\r\n    color: '#fff',\r\n  },\r\n  button: {\r\n    marginTop: '1rem',\r\n    color: 'tomato',\r\n    borderColor: 'tan',\r\n    '&:disabled': {\r\n      color: 'grey',\r\n      borderColor: 'grey',\r\n      cursor: 'not-allowed',\r\n    },\r\n  },\r\n  field: {\r\n    margin: '1rem 0rem',\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport const InputField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'tomato',\r\n    },\r\n    '& label': {\r\n      color: 'tan',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: 'tan',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'tan',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        color: '#fff',\r\n        borderColor: 'tan',\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n","import { Box, Button, Grid, Typography } from '@material-ui/core';\r\nimport { Send } from '@material-ui/icons';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-hot-toast';\r\nimport { Oval } from 'react-loader-spinner';\r\n\r\nimport { EMAIL_VALIDATE_REGX } from '../../constants';\r\nimport { InputField, useStyles } from './styles/contacts';\r\n\r\nconst isValidEmail = (email) => {\r\n  return EMAIL_VALIDATE_REGX.test(email);\r\n};\r\n\r\nconst Contact = () => {\r\n  const classes = useStyles();\r\n  const url = 'https://formspree.io/f/xqkvjyqv';\r\n\r\n  const [clientInfo, setClientInfo] = useState({\r\n    os: '',\r\n    userAgent: '',\r\n    ipinfo: {},\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n  });\r\n  const [errors, setErrors] = useState({\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n  });\r\n\r\n  const validateForm = () => {\r\n    let isValid = true;\r\n    const newErrors = {};\r\n\r\n    if (formData.name.trim() === '') {\r\n      newErrors.name = 'Name is required';\r\n      isValid = false;\r\n    }\r\n\r\n    if (formData.email.trim() === '') {\r\n      newErrors.email = 'Email is required';\r\n      isValid = false;\r\n    } else if (!isValidEmail(formData.email)) {\r\n      newErrors.email = 'Invalid email address';\r\n      isValid = false;\r\n    }\r\n\r\n    if (formData.message.trim() === '') {\r\n      newErrors.message = 'Message is required';\r\n      isValid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n    validateForm();\r\n  };\r\n\r\n  const handleOnSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setLoading(true);\r\n      if (validateForm()) {\r\n        const data = new FormData();\r\n        data.append('name', formData.name);\r\n        data.append('email', formData.email);\r\n        data.append('message', formData.message);\r\n        data.append('clientInfo', JSON.stringify(clientInfo));\r\n        await axios({\r\n          method: 'post',\r\n          url,\r\n          data,\r\n        });\r\n        toast.success('Message sent successfully');\r\n        setFormData({\r\n          name: '',\r\n          email: '',\r\n          message: '',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toast.error('Message failed to send');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const os = navigator.platform;\r\n    const userAgent = navigator.userAgent;\r\n\r\n    setClientInfo((prev) => ({\r\n      ...prev,\r\n      os,\r\n      userAgent,\r\n    }));\r\n\r\n    axios\r\n      .get('https://api.bigdatacloud.net/data/client-info')\r\n      .then((data) => {\r\n        setClientInfo((prev) => ({\r\n          ...prev,\r\n          ipinfo: data?.data,\r\n        }));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error getting IP and location:', error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Box component=\"div\" className={classes.contactContainer}>\r\n      <Grid container justify=\"center\">\r\n        <Box component=\"div\" className={classes.form}>\r\n          <Typography variant=\"h5\" className={classes.heading}>\r\n            Get in touch\r\n          </Typography>\r\n          <form onSubmit={handleOnSubmit}>\r\n            <InputField\r\n              fullWidth={true}\r\n              label=\"Name\"\r\n              variant=\"outlined\"\r\n              name=\"name\"\r\n              inputProps={{ className: classes.input }}\r\n              value={formData.name}\r\n              onChange={handleInputChange}\r\n              error={!!errors.name}\r\n              helperText={errors.name}\r\n            />\r\n            <InputField\r\n              fullWidth={true}\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              name=\"email\"\r\n              inputProps={{ className: classes.input }}\r\n              className={classes.field}\r\n              value={formData.email}\r\n              onChange={handleInputChange}\r\n              error={!!errors.email}\r\n              helperText={errors.email}\r\n            />\r\n            <InputField\r\n              fullWidth={true}\r\n              label=\"Message\"\r\n              variant=\"outlined\"\r\n              name=\"message\"\r\n              multiline\r\n              rows={4}\r\n              inputProps={{ className: classes.input }}\r\n              value={formData.message}\r\n              onChange={handleInputChange}\r\n              error={!!errors.message}\r\n              helperText={errors.message}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"outlined\"\r\n              fullWidth={true}\r\n              endIcon={!loading && <Send />}\r\n              className={classes.button}\r\n              disabled={loading}\r\n            >\r\n              {loading ? (\r\n                <Oval\r\n                  height={25}\r\n                  width={25}\r\n                  color=\"tomato\"\r\n                  visible={true}\r\n                  ariaLabel=\"oval-loading\"\r\n                  secondaryColor=\"#250220\"\r\n                  strokeWidth={2}\r\n                  strokeWidthSecondary={2}\r\n                />\r\n              ) : (\r\n                'Contact Me'\r\n              )}\r\n            </Button>\r\n          </form>\r\n        </Box>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"sourceRoot":""}